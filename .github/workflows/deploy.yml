name: Build and Deploy to AWS

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21

      - name: Make Gradle wrapper executable
        working-directory: ./lambda
        run: chmod +x gradlew

      - name: Build with Gradle
        working-directory: ./lambda
        run: ./gradlew build

      - name: Upload Lambda JAR
        uses: actions/upload-artifact@v4
        with:
          name: lambda-jar
          path: ./lambda/build/libs/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      id-token: write

    steps:
      - uses: actions/checkout@v4

      - name: Download Lambda JAR
        uses: actions/download-artifact@v4
        with:
          name: lambda-jar
          path: ./lambda/build/libs/

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Cache Terraform plugins and modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ./infrastructure/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('./infrastructure/**/*.tf') }}

      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init -plugin-dir ~/.terraform.d/plugin-cache

      - name: Detect existing API Gateway
        id: detect-api
        run: |
          set +e
          EXISTING_API_ID=$(aws apigateway get-rest-apis --query "items[?name=='comment-sender-api'].id" --output text)
          echo "Detected API ID: $EXISTING_API_ID"
          echo "existing_api_id=$EXISTING_API_ID" >> $GITHUB_ENV
          set -e

      - name: Import existing Lambda (if needed)
        working-directory: ./infrastructure
        run: |
          set -e
          if ! terraform state list | grep -q "aws_lambda_function.comment_handler"; then
            echo "Importing existing Lambda function into Terraform state..."
            terraform import -input=false aws_lambda_function.comment_handler comment-sender-lambda || true
          else
            echo "Lambda function already imported."
          fi

      - name: Find JAR and Plan Terraform
        working-directory: ./infrastructure
        run: |
          JAR_PATH=$(ls ../lambda/build/libs/*.jar | head -n 1)
          echo "Using JAR: $JAR_PATH"
          terraform plan -out=tfplan \
            -var="lambda_package_path=$JAR_PATH" \
            -var="existing_api_id=${{ env.existing_api_id }}"

      - name: Apply Terraform Plan
        working-directory: ./infrastructure
        run: terraform apply -auto-approve tfplan
