name: Build and Deploy to AWS

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: eu-central-1
  TF_VERSION: 1.9.8

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
      - name: Make Gradle wrapper executable
        working-directory: ./lambda
        run: chmod +x gradlew
      - name: Build with Gradle
        working-directory: ./lambda
        run: ./gradlew build
      - name: Upload Lambda JAR
        uses: actions/upload-artifact@v4
        with:
          name: lambda-jar
          path: ./lambda/build/libs/*.jar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Download Lambda JAR
        uses: actions/download-artifact@v4
        with:
          name: lambda-jar
          path: ./lambda/build/libs/
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Cache Terraform plugins
        uses: actions/cache@v4
        with:
          path: |
            ~/.terraform.d/plugin-cache
            ./infrastructure/.terraform
          key: ${{ runner.os }}-terraform-${{ hashFiles('./infrastructure/**/*.tf') }}
      - name: Prepare plugin cache
        run: mkdir -p ~/.terraform.d/plugin-cache
      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init
      - name: Import Lambda if needed
        working-directory: ./infrastructure
        run: |
          set -e
          if ! terraform state list | grep -q "aws_lambda_function.comment_handler"; then
            terraform import -input=false aws_lambda_function.comment_handler comment-sender-lambda || true
          fi
      - name: Apply Terraform
        working-directory: ./infrastructure
        run: |
          JAR_PATH=$(ls ../lambda/build/libs/*.jar | head -n 1)
          terraform apply -auto-approve \
            -var="lambda_package_path=$JAR_PATH" \
            -var="aws_region=${{ env.AWS_REGION }}" \
            -var="from_email=${{ secrets.FROM_EMAIL }}" \
            -var="admin_email=${{ secrets.ADMIN_EMAIL }}" \
            -var="existing_api_id=${{ secrets.EXISTING_API_ID || '' }}"
      - name: Terraform Output
        working-directory: ./infrastructure
        run: terraform output
